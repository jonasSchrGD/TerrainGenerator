// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateHeight

//https://github.com/keijiro/NoiseShader/blob/master/Assets/GLSL/ClassicNoise2D.glsl
float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float4 permute(float4 x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}
float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}
float2 fade(float2 t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
float cnoise(float2 P)
{
    float4 Pi = floor(P.xyxy) + float4(0.0, 0.0, 1.0, 1.0);
    float4 Pf = frac(P.xyxy) - float4(0.0, 0.0, 1.0, 1.0);
    Pi = mod289(Pi); // To avoid truncation effects in permutation
    float4 ix = Pi.xzxz;
    float4 iy = Pi.yyww;
    float4 fx = Pf.xzxz;
    float4 fy = Pf.yyww;

    float4 i = permute(permute(ix) + iy);

    float4 gx = frac(i * (1.0 / 41.0)) * 2.0 - 1.0;
    float4 gy = abs(gx) - 0.5;
    float4 tx = floor(gx + 0.5);
    gx = gx - tx;

    float2 g00 = float2(gx.x, gy.x);
    float2 g10 = float2(gx.y, gy.y);
    float2 g01 = float2(gx.z, gy.z);
    float2 g11 = float2(gx.w, gy.w);

    float4 norm = taylorInvSqrt(float4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
    g00 *= norm.x;
    g01 *= norm.y;
    g10 *= norm.z;
    g11 *= norm.w;

    float n00 = dot(g00, float2(fx.x, fy.x));
    float n10 = dot(g10, float2(fx.y, fy.y));
    float n01 = dot(g01, float2(fx.z, fy.z));
    float n11 = dot(g11, float2(fx.w, fy.w));

    float2 fade_xy = fade(Pf.xy);
    float2 n_x = lerp(float2(n00, n01), float2(n10, n11), fade_xy.x);
    float n_xy = lerp(n_x.x, n_x.y, fade_xy.y);
    return 2.3 * n_xy;
}
float InverseLerp(float min, float max, float value)
{
    return saturate((value - min) / (max - min));
}
float PerlinNoise(float x, float y, float scale, int octaves, float persistence, float lacunarity)
{
    float maxvalue = 0;

    float noise = 0;
    float amplitude = 1;
    float frequency = 1;
    for (int i = 0; i < octaves; i++)
    {
        float xSample = x / scale * frequency;
        float ySample = y / scale * frequency;

        float value = cnoise(float2(xSample, ySample));
        noise += value * amplitude;
        maxvalue += amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return InverseLerp(-maxvalue, maxvalue, noise);
}

struct FilterData
{
    float scale;
    int octaves;
    float persistence;
    float lacunarity;
    float strength;
    
    float xOffset;
    float yOffset;

    int FilterType;

    //landfilter variables
    float landMin;
    float landMax;

    //terracefilter variables
    int terraceCount;

    //levelOffsetfilter variables
    float levelOffset;

    //biomefilter data
    float biomeThreshold;
};

RWStructuredBuffer<FilterData> preFilters;
RWStructuredBuffer<FilterData> biomeFilters;
RWStructuredBuffer<FilterData> postFilters;

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heightMap;

matrix localToWorld;
float maxHeight = 10;

float cubicInOut(float t) {
    return t < 0.5
        ? 2*t*t
        : -1+(4-2*t)*t;
}
float GetValue(FilterData data, float3 vertex)
{
    switch (data.FilterType)
    {
    case -1:
        return vertex.y;
    case -2:
        return 0;
    case 0://perlin
        return data.strength * PerlinNoise(data.xOffset + vertex.x, data.yOffset + vertex.z, data.scale, data.octaves, data.persistence, data.lacunarity);
    case 1://land
        float val = PerlinNoise(data.xOffset + vertex.x, data.yOffset + vertex.z, data.scale, data.octaves, data.persistence, data.lacunarity);
        float t = InverseLerp(data.landMin, data.landMax, val);
        return data.strength * (t*t);
    case 2://terrace
        float terraceCount = data.terraceCount / (maxHeight / 10);
        return round(vertex.y * terraceCount) / terraceCount;
    case 3://height
        return vertex.y;
    default:
        return 50;
    }
}

[numthreads(4,1,1)]
void CalculateHeight (uint3 id : SV_DispatchThreadID)
{
    float3 vertex = vertices[id.x];
    vertex.y = 0;
    vertex = mul(localToWorld, float4(vertex, 1)).xyz;
    float mask = 1;

    //base terrain generation
    if (preFilters.Length > 0)
    {
        mask = GetValue(preFilters[0], vertex);
        vertex.y = mask;
    }
    for (int i = 1; i < preFilters.Length; i++)
    {
        float filterHeight = GetValue(preFilters[i], vertex);
        vertex.y += filterHeight * mask;
    }

    //biome generation
    if (biomeFilters.Length > 0)
    {
        float biomeValue = GetValue(biomeFilters[0], vertex);

        int firstFilter = 0;
        int SecondFilter = 0;
        for (int j = 1; j < biomeFilters.Length; j++)
        {
            if (biomeValue <= biomeFilters[j].biomeThreshold)
            {
                SecondFilter = j;
                break;
            }
            if (biomeValue > biomeFilters[j].biomeThreshold)
            {
                firstFilter = j;
                SecondFilter = j;
            }
        }
        float lowerfilterValue = GetValue(biomeFilters[firstFilter], vertex);
        float upperfilterValue = GetValue(biomeFilters[SecondFilter], vertex);

        float t = saturate(
        (biomeValue - biomeFilters[firstFilter].biomeThreshold) /
        (biomeFilters[SecondFilter].biomeThreshold - biomeFilters[firstFilter].biomeThreshold));

        vertex.y += lerp(lowerfilterValue, upperfilterValue, cubicInOut(cubicInOut(t))) * mask;
    }

    //terrain post handling: terracing, height offset etc
    for (int i = 0; i < postFilters.Length; i++)
    {
        vertex.y = GetValue(postFilters[i], vertex);
    }

    heightMap[id.x] = vertex.y;
    //vertices[id.x].y = vertex.y;
}